generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  articles     Article[]
  reservations Reservation[]
  seats        Seat[]
}

model Article {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  body        String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int?
  user        User?    @relation(fields: [userId], references: [id])
}

model Movie {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  posterUrl String?
  seances   Seance[]
}

model Seance {
  id      Int      @id @default(autoincrement())
  time    DateTime @unique
  movieId Int
  movie   Movie    @relation(fields: [movieId], references: [id])
  seats   Seat[]
}

model Seat {
  id            Int          @id @default(autoincrement())
  userId        Int?
  place         Int
  row           Int
  version       Int          @default(0)
  seanceId      Int?
  reservationId Int?
  status        SeatStatus   @default(AVAILABLE)
  Reservation   Reservation? @relation(fields: [reservationId], references: [id])
  seance        Seance?      @relation(fields: [seanceId], references: [id])
  claimedBy     User?        @relation(fields: [userId], references: [id])

  @@unique([row, place, seanceId])
  @@index([seanceId, status, userId])
}

model Reservation {
  id        Int               @id @default(autoincrement())
  userId    Int
  totalCost Float
  status    ReservationStatus @default(PENDING)
  createdAt DateTime          @default(now())
  user      User              @relation(fields: [userId], references: [id])
  seats     Seat[]
}

enum SeatStatus {
  AVAILABLE
  RESERVED
  BOOKED
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELED
}
